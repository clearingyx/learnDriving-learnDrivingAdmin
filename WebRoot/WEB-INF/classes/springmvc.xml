<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 如下配置中，如果配置了include-filter type=annotation 那么只有在其中配置的注解会被扫描，前提是-->
	<context:component-scan base-package="com.net"></context:component-scan>
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/"></property>
		<property name="suffix" value=""></property>
	</bean>
	<!-- 只有配置了如下标签，@RequestMapping中的produces才会起作用，跟其注册的消息体转换类有关 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes" value="application/json" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<mvc:default-servlet-handler />
	<!-- location中的内容可以写多个地址，比如可以这么写location="/,/**"前一个表示在根目录查找 -->
	<mvc:resources mapping="/upload/**" location="/upload/,/CKEditorUploadImage/" />
	<mvc:resources mapping="/images/**" location="/WEB-INF/images/" />
	<mvc:resources mapping="/css/**" location="/WEB-INF/css/" />
	<mvc:resources mapping="/plugins/**" location="/WEB-INF/plugins/" />
	<mvc:resources mapping="/js/**" location="/WEB-INF/js/" />
	<mvc:resources mapping="/*.html" location="/WEB-INF/static_pages/" />
	<mvc:resources mapping="/*.xml" location="/WEB-INF/" />
	<mvc:interceptors>
		<bean class="com.net.intercpter.MyInterceptor"></bean>
	</mvc:interceptors>
	<!-- 99框架赋值写法有问题，web请求可以注入属性文件的值，代码测试无法注入，导致junit测试Dao层报加载配置文件出错 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:dbconfig.properties</value>
			</list>
		</property>
	</bean>
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driverClassName}" />
		<property name="filters" value="${filters}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${logAbandoned}" />
	</bean>
	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
		<!-- mapper扫描 -->
		<property name="mapperLocations" value="classpath:mybatis/*/*.xml"></property>
	</bean>
	<!-- 自定义上传拦截，如最大上传值及最小上传值 单个文件4M，解决原始文件上传和spring上传request被解析的问题-->
		<!-- url中带有excludeUrls的http请求就不会被multipartResolver先解析-->
	<bean id="multipartResolver" class="com.net.resolver.MyMultipartResolver">
		<property name="excludeUrls">
			<list>
				<value>ckupload</value>
				<!--
					使用springmvc的文件上传实现了，所有暂时不需要转换request，
					疑问是不知道百度编辑器的jar中是否有文件上传的代码，因为看到
					有文件上传需要的jar包，而且也没有得到config.json中配置的文件格式名称
				-->
				<!--				<value>UEditorUploadImage</value>-->
			</list>
		</property>
		<!-- 指定所上传文件的总大小不能超过16MB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize">
			<value>16777216</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
		<property name="defaultEncoding">
			<value>utf-8</value>
		</property>
	</bean>
</beans>
